%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% MIT License
% 
% Copyright (c) 2021 David Wuthier (dwuthier@gmail.com)
% 
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
% 
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
% 
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Initialization
close all

% Get hoop locations from ROS
rosshutdown
rosinit
msg = rostopic("echo", '/vrpn_client_node/hoop1/pose');
hoop1 = [msg.Pose.Position.X msg.Pose.Position.Y, msg.Pose.Position.Z]';
msg = rostopic("echo", '/vrpn_client_node/hoop2/pose');
hoop2 = [msg.Pose.Position.X msg.Pose.Position.Y, msg.Pose.Position.Z]';
msg = rostopic("echo", '/vrpn_client_node/hoop3/pose');
hoop3 = [msg.Pose.Position.X msg.Pose.Position.Y, msg.Pose.Position.Z]';
msg = rostopic("echo", '/vrpn_client_node/hoop4/pose');
hoop4 = [msg.Pose.Position.X msg.Pose.Position.Y, msg.Pose.Position.Z]';
rosshutdown
clc


knots = [0 4 8 12 16 20]; %time
waypoints = cell(1,5);
waypoints{1} = [0 ; -2 ; 0];
waypoints{2} = hoop1;
waypoints{3} = hoop2;
waypoints{4} = hoop3;
waypoints{5} = hoop4;
waypoints{6} = [0 ; -2; 0];

order = 20;
corridors.times = [knots(1) knots(2)-1.55... 
    knots(2)-0.55 knots(2)+0.55...
    knots(3)-0.55 knots(3)+0.55...
    knots(4)-0.55 knots(4)+0.55...
    knots(5)-0.55 knots(5)+0.55...
    knots(6)]; %time to hit the corridors
corridors.x_lower = [waypoints{1}(1)-0.25...
    waypoints{2}(1)+1.5 ...
    waypoints{2}(1)+0.25...
    waypoints{2}(1)-0.5...
    waypoints{3}(1)-0.05...
    waypoints{3}(1)-0.05...
    waypoints{4}(1)-0.5...
    waypoints{4}(1)+0.25...
    waypoints{5}(1)-0.05...
    waypoints{5}(1)-0.05...
    waypoints{6}(1)-0.25]; 
corridors.x_upper = [waypoints{1}(1)+0.25...
    waypoints{2}(1)+2 ...
    waypoints{2}(1)+0.5...
    waypoints{2}(1)-0.25...
    waypoints{3}(1)+0.05...
    waypoints{3}(1)+0.05...
    waypoints{4}(1)-0.25...
    waypoints{4}(1)+0.5...
    waypoints{5}(1)+0.05...
    waypoints{5}(1)+0.05...
    waypoints{6}(1)+0.25]; 
corridors.y_lower = [waypoints{1}(2)-0.25...
    waypoints{2}(2)-0.25...
    waypoints{2}(2)-0.05...
    waypoints{2}(2)-0.05...
    waypoints{3}(2)-0.5...
    waypoints{3}(2)+0.25...
    waypoints{4}(2)-0.05...
    waypoints{4}(2)-0.05...
    waypoints{5}(2)+0.25...
    waypoints{5}(2)-0.5...
    waypoints{6}(2)-0.25]; 
corridors.y_upper = [waypoints{1}(2)+0.25...
    waypoints{2}(2)+0.25...
    waypoints{2}(2)+0.05...
    waypoints{2}(2)+0.05...
    waypoints{3}(2)-0.25...
    waypoints{3}(2)+0.5...
    waypoints{4}(2)+0.05...
    waypoints{4}(2)+0.05...
    waypoints{5}(2)+0.5...
    waypoints{5}(2)-0.25...
    waypoints{6}(2)+0.25]; 
corridors.z_lower = [waypoints{1}(3)-0.5...
    waypoints{2}(3)-0.1...
    waypoints{2}(3)-0.1 waypoints{2}(3)+0.1...
    waypoints{3}(3)-0.1 waypoints{3}(3)-0.1...
    waypoints{4}(3)-0.1 waypoints{4}(3)-0.1...
    waypoints{5}(3)-0.1 waypoints{5}(3)-0.1...
    waypoints{6}(3)-0.5];
corridors.z_upper = [waypoints{1}(3)+0.5...
    waypoints{2}(3)+0.1... 
    waypoints{2}(3)+0.1 waypoints{2}(3)+0.1...
    waypoints{3}(3)+0.1 waypoints{3}(3)+0.1...
    waypoints{4}(3)+0.1 waypoints{4}(3)+0.1...
    waypoints{5}(3)+0.1 waypoints{5}(3)+0.1...
    waypoints{6}(3)+0.5];

make_plots = true;
poly_traj = uas_minimum_snap(knots, order, waypoints, corridors, make_plots);
