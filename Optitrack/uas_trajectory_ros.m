%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% MIT License
% 
% Copyright (c) 2021 David Wuthier (dwuthier@gmail.com)
% 
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
% 
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
% 
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Initialization
close all
% clear
% clc
%% Initialisation
rosshutdown
rosinit
msg = rostopic("echo", '/vrpn_client_node/hoop1/pose');
hoop1 = [msg.Pose.Position.X msg.Pose.Position.Y, msg.Pose.Position.Z]';
msg = rostopic("echo", '/vrpn_client_node/hoop2/pose');
hoop2 = [msg.Pose.Position.X msg.Pose.Position.Y, msg.Pose.Position.Z]';
msg = rostopic("echo", '/vrpn_client_node/hoop3/pose');
hoop3 = [msg.Pose.Position.X msg.Pose.Position.Y, msg.Pose.Position.Z]';
msg = rostopic("echo", '/vrpn_client_node/hoop4/pose');
hoop4 = [msg.Pose.Position.X msg.Pose.Position.Y, msg.Pose.Position.Z]';
rosshutdown
clc
%%
clc;
close all;
% indexes
box = 2;
h1 = box + 1;
h2 = h1 + 1;
h3 = h2 + 1;
h4 = h3 + 1;

knots = [0 6 11.5 16 22 28 29.5]; %time
waypoints = cell(1,7);
waypoints{1} = [1.60 ; -2.62 ; 0];
waypoints{2} = [1.60 ; -2.62 ; 1.30];
waypoints{h1} = hoop1 + [0; 0.335 ;0.055];
waypoints{h2} = hoop2 + [0.25; 0; 0];
waypoints{h3} = hoop3 - [0; 0.25 ;-0.1];
waypoints{h4} = hoop4 - [0.25; 0; -0.17];
waypoints{7} = waypoints{6} - [0; 1; 0];
%waypoints{7} = [1.60 ; -2.62 ; 1];

order = 20;
corridors.times = [knots(1) knots(2)+2.5 ... 
    knots(3)-1 knots(3)+1 ...
    knots(4)-1 knots(4)+1 ...
    knots(5)-1 knots(5)+1 ...
    knots(6)-1 knots(6)+1 ...
    knots(7)]; %time to hit the corridors
corridors.x_lower = [waypoints{1}(1)-0.25...
    waypoints{3}(1)+.8 ...
    waypoints{3}(1)+0.25...
    waypoints{3}(1)-0.5...
    waypoints{4}(1)-0.05...
    waypoints{4}(1)-0.05...
    waypoints{5}(1)-0.5...
    waypoints{5}(1)+0.25...
    waypoints{6}(1)-0.05...
    waypoints{6}(1)-0.05...
    waypoints{7}(1)-0.25]; 
corridors.x_upper = [waypoints{1}(1)+0.25...
    waypoints{3}(1)+1.3 ...
    waypoints{3}(1)+0.5...
    waypoints{3}(1)-0.25...
    waypoints{4}(1)+0.05...
    waypoints{4}(1)+0.05...
    waypoints{5}(1)-0.25...
    waypoints{5}(1)+0.5...
    waypoints{6}(1)+0.05...
    waypoints{6}(1)+0.05...
    waypoints{7}(1)+0.25]; 
corridors.y_lower = [waypoints{1}(2)-0.25...
    waypoints{3}(2)+0.7...
    waypoints{3}(2)-0.05...
    waypoints{3}(2)-0.1...
    waypoints{4}(2)-1 ...
    waypoints{4}(2)+0.25...
    waypoints{5}(2)-0.05...
    waypoints{5}(2)-0.05...
    waypoints{6}(2)+0.25...
    waypoints{6}(2)-0.5...
    waypoints{7}(2)-0.25]; 
corridors.y_upper = [waypoints{1}(2)+0.25...
    waypoints{3}(2)+1.2 ...
    waypoints{3}(2)+0.05...
    waypoints{3}(2)...
    waypoints{4}(2)-0.5...
    waypoints{4}(2)+0.5...
    waypoints{5}(2)+0.05...
    waypoints{5}(2)+0.05...
    waypoints{6}(2)+0.5...
    waypoints{6}(2)-0.25...
    waypoints{7}(2)+0.25]; 
corridors.z_lower = [waypoints{1}(3)-0.5...
    waypoints{3}(3)-0.1...
    waypoints{3}(3)-0.05 waypoints{3}(3)+0.1...
    waypoints{4}(3) + 0.02 waypoints{4}(3) + 0.02...
    waypoints{5}(3)-0.05 waypoints{5}(3)-0.1...
    waypoints{6}(3) waypoints{6}(3)...
    waypoints{7}(3)-0.5];
corridors.z_upper = [waypoints{1}(3)+0.5...
    waypoints{3}(3)+0.1... 
    waypoints{3}(3)+0.1 waypoints{3}(3)+0.1...
    waypoints{4}(3)+0.07 waypoints{4}(3)+0.07...
    waypoints{5}(3)+0.1 waypoints{5}(3)+0.1...
    waypoints{6}(3)+0.1 waypoints{6}(3)+0.1...
    waypoints{7}(3)+0.5];

make_plots = true;
poly_traj = uas_minimum_snap(knots, order, waypoints, corridors, make_plots);

%% Superimpose plots
hold on
poly_traj.showPath(3)
plot(out.p.Data(:,1), out.p.Data(:,2))
xlim([-1 4])